/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   voleur                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dsaada <dsaada@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/23 15:21:01 by dsaada            #+#    #+#             */
/*   Updated: 2023/01/23 15:35:27 by dsaada           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once
#include <string>

namespace IRC
{

enum NumericCode
{
	ERR_NOSUCHNICK = 401,
	ERR_NOSUCHSERVER = 402,
	ERR_NOSUCHCHANNEL = 403,
	ERR_CANNOTSENDTOCHAN = 404,
	ERR_TOOMANYCHANNELS = 405,
	ERR_WASNOSUCHNICK = 406,
	ERR_TOOMANYTARGETS = 407,
	// ERR_NOSUCHSERVICE = 408,
	ERR_NOORIGIN = 409,
	ERR_NORECIPIENT = 411,
	ERR_NOTEXTTOSEND = 412,
	ERR_NOTOPLEVEL = 413,
	ERR_WILDTOPLEVEL = 414,
	// ERR_BADMASK = 415,
	ERR_UNKNOWNCOMMAND = 421,
	ERR_NOMOTD = 422,
	ERR_NOADMINFO = 423,
	ERR_FILERROR = 424,
	ERR_NONICKNAMEGIVEN = 431,
	ERR_ERRONEUSNICKNAME = 432,
	ERR_NICKNAMEINUSE = 433,
	ERR_NICKCOLLISION = 436,
	// ERR_UNAVAILABLE_RESOURCE = 437,
	ERR_USERNOTINCHANNEL = 441,
	ERR_NOTONCHANNEL = 442,
	ERR_USERONCHANNEL = 443,
	ERR_NOLOGIN = 444,
	ERR_SUMMONDISABLED = 445,
	ERR_USERDISABLED = 446,
	ERR_NOTREGISTERED = 451,
	ERR_NEEDMOREPARAMS = 461,
	ERR_ALREADYREGISTRED = 462,
	ERR_NOPERMFORHOST = 463,
	ERR_PASSWDMISSMATCH = 464,
	ERR_YOUREBANNEDCREEP = 465,
	ERR_YOUWILLBEBANNED = 466,
	ERR_KEYSET = 467,
	ERR_CHANNELISFULL = 471,
	ERR_UNKNOWNMODE = 472,
	ERR_INVITEONLYCHAN = 473,
	ERR_BANNEDFROMCHAN = 474,
	ERR_BADCHANNELKEY = 475,
	ERR_BADCHANMASK = 476,
	// ERR_NOCHANMODES = 477,
	// ERR_BANNLISTFULL = 478,
	ERR_NOPRIVILEGES = 481,
	ERR_CHANOPRIVISNEED = 482,
	ERR_CANTKILLSERVER = 483,
	// ERR_RESTRICTED = 484,
	// ERR_UNIQOPPRIVSNEEDED = 485,
	ERR_NOOPERHOST = 491,
	ERR_UMODEUNKNOWNFLAG = 501,
	ERR_USERSDONTMATCH = 502,

	RPL_WELCOME = 1,
	RPL_YOURHOST = 2,
	RPL_CREATED = 3,
	RPL_MYINFO = 4,
	RPL_BOUNCE = 5,
	RPL_STATSLINKINFO = 211,
	RPL_STATSCOMMANDS = 212,
	RPL_ENDOFSTATS = 219,
	RPL_UMODEIS = 221,
	RPL_SERVLIST = 234,
	RPL_SERVLISTEND = 235,
	RPL_STATSUPTIME = 242,
	RPL_STATSOLINE = 243,
	RPL_LUSERCLIENT = 251,
	RPL_LUSEROP = 252,
	RPL_LUSERUNKNOWN = 253,
	RPL_LUSERCHANNELS = 254,
	RPL_LUSERME = 255,
	RPL_AWAY = 301,
	RPL_USERHOST = 302,
	RPL_UNAWAY = 305,
	RPL_NOWAWAY = 306,
	RPL_WHOISUSER = 311,
	RPL_WHOISSERVER = 312,
	RPL_WHOISOPERATOR = 313,
	RPL_WHOISIDLE = 317,
	RPL_ENDOFWHOIS = 318,
	RPL_WHOISCHANNELS = 319,
	RPL_ENDOFWHO = 315,
	RPL_WHOWASUSER = 314,
	RPL_ENDOFWHOWAS = 369,
	RPL_LISTSTART = 321, /* Not used / (╯°□°）╯︵ ┻━┻  */
	RPL_LIST = 322,
	RPL_LISTEND = 323,
	RPL_CHANNELMODEIS = 324,
	RPL_NOTOPIC = 331,
	RPL_TOPIC = 332,
	RPL_INVITING = 341,
	RPL_SUMMONING = 342,
	RPL_INVITELIST = 346,
	RPL_ENDOFINVITELIST =  347,
	RPL_EXCEPTLIST = 348,
	RPL_ENDOFEXCEPTLIST = 349,
	RPL_VERSION = 351,
	RPL_WHOREPLY = 352,
	RPL_NAMREPLY = 353,
	RPL_ENDOFNAMES = 366,
	RPL_BANLIST = 367,
	RPL_ENDOFBANLIST = 368,
	RPL_INFO = 371,
	RPL_MOTD = 372,
	RPL_ENDOFINFO = 374,
	RPL_MOTDSTART = 375,
	RPL_ENDOFMOTD = 376,
	RPL_YOUREOPER = 381,
	RPL_REHASHING = 382,
	RPL_YOURESERVICE = 383,
	RPL_TIME = 391
};

struct Numeric
{
	const NumericCode	code;
	const str			content;
	Numeric(const NumericCode code, const str &content);
};

namespace Error
{
	const Numeric nosuchnick(const str &nickname);
	const Numeric nosuchserver(const str &servername);
	const Numeric nosuchchannel(const str &channelname);
	const Numeric cannotsendtochan(const str &channelname);
	const Numeric toomanychannels(const str &channelname);
	const Numeric wasnosuchnick(const str &nickname);
	const Numeric toomanytargets(const str &target);
	const Numeric nosuchservice(const str &servicename);
	const Numeric noorigin();
	const Numeric norecipient(const str &command);
	const Numeric notexttosend();
	const Numeric notoplevel(const str &mask);
	const Numeric badmask(const str &mask);
	const Numeric wildtoplevel(const str &mask);
	const Numeric unknowncommand(const str &command);
	const Numeric nomotd();
	const Numeric noadmininfo();
	const Numeric fillerror(const str &file_op, const str &file);
	const Numeric nonicknamegiven();
	const Numeric erroneusnickname(const str &nickname);
	const Numeric nicknameinuse(const str &nickname);
	const Numeric nickcollision(const str &nickname);
	const Numeric usernotinchannel(const str &nickname, const str &channel);
	const Numeric notonchannel(const str &channel);
	const Numeric useronchannel(const str &nickname, const str &channel);
	const Numeric nologin(const str &user);
	const Numeric summondisabled();
	const Numeric usersdisabled();
	const Numeric notregistered();
	const Numeric needmoreparams(const str &command);
	const Numeric alreadyregistred();
	const Numeric nopermforhost();
	const Numeric passwdmissmatch();
	const Numeric yourebannedcreep();
	const Numeric keyset(const str &channel);
	const Numeric channelisfull(const str &channel);
	const Numeric unknownmode(const str &c);
	const Numeric inviteonlychan(const str &channel);
	const Numeric bannedfromchan(const str &channel);
	const Numeric badchannelkey(const str &channel);
	const Numeric nochanmodes(const str &channel);
	const Numeric noprivileges();
	const Numeric chanoprisneeded(const str &channel);
	const Numeric cantkillserver();
	const Numeric restricted();
	const Numeric nooperhost();
	const Numeric umodeunknownflag();
	const Numeric usersdontmatch();
} 

namespace Reply
{
	const Numeric welcome(const str &userPrefix);
	const Numeric yourhost(const str &servername, const str &version);
	const Numeric created(const str &date);
	const Numeric myinfo(const str &servername, const str &version, const str &availableUserModes, const str &availableChannelModes);
	const Numeric bounce(const str &servername, const str &port);
	const Numeric statslinkinfo(const str &linkname, size_t sendq, size_t sentMessages, size_t sentKbytes, size_t recvMessages, size_t recvKbytes, time_t timeOpen);
	const Numeric statscommands(const str &command, size_t count, size_t byteCount, size_t remoteCount);
	const Numeric endofstats(const str &letter);
	const Numeric umodeis(const str &modes);
	const Numeric servlist(const str &name, const str &server, const str &mask, const str &type, size_t hopcount, const str &info);
	const Numeric servlistend(const str &mask, const str &type);
	const Numeric statuptime(time_t uptime);
	const Numeric statoline(const str &hostmask, const str &name);
	const Numeric away(const str &nickname, const str &reason);
	const Numeric unaway();
	const Numeric nowaway();
	const Numeric list(const str &channel, size_t visible, const str &topic);
	const Numeric listend();
	const Numeric channelmodeis(const str &channel, const str &modes);
	const Numeric notopic(const str &channel);
	const Numeric topic(const str &channel, const str &topic);
	const Numeric inviting(const str &channel, const str &nickname);
	const Numeric invitelist(const str &channel, const str &invitemask);
	const Numeric endofinvitelist(const str &channel);
	const Numeric exceptlist(const str &channel, const str &exceptionmask);
	const Numeric endofexceptlist(const str &channel);
	const Numeric version(const str &version, const str debuglevel, const str &server, const str &comments);
	const Numeric namreply(const str &names);
	const Numeric endofnames(const str &name);
	const Numeric banlist(const str &channel, const str &banmask);
	const Numeric endofbanlist(const str &channel);
	const Numeric motd(const str &text);
	const Numeric motdstart(const str &servername);
	const Numeric endofmotd();
	const Numeric info(const str &info);
	const Numeric endofinfo();
	const Numeric youreoper();
	const Numeric youreservice(const str &servicename);
	const Numeric time(const str &servername);
	const Numeric lusersclient(size_t users, size_t services, size_t servers);
	const Numeric lusersop(size_t nb);
	const Numeric lusersunknown(size_t nb);
	const Numeric luserschannels(size_t nb);
	const Numeric lusersme(size_t nb);
	const Numeric whoreply(const str &msg);
	const Numeric endofwho(const str &target);
	const Numeric whoisuser(const str &nick, const str &user, const str &host, const str &realname);
	const Numeric whoisserver(const str &nick, const str &servername, const str shortinfo);
	const Numeric whoisoperator(const str &nick);
	const Numeric whoisidle(const str &nick, size_t idle);
	const Numeric whoischannels(const str &nick, const str &status, const str &chan);
	const Numeric endofwhois(const str &nick);
	const Numeric whoreply(const str &msg);
	const Numeric endofwho(const str &target);
	const Numeric whowasuser(const str &nick, const str &user, const str &host, const str &realname);
	const Numeric endofwhowas(const str &nick);
	const Numeric rehashing(const str &filename);
	const Numeric userhostreply(const str &msg);

}

}


#include <iomanip>
#include "Numeric.hpp"
#include "libft.hpp"

namespace IRC
{

Numeric::Numeric(const NumericCode code, const str &content) :
code(code), content(content)
{}

namespace Error
{
	const Numeric nosuchnick(const str &nickname)									{ return (Numeric(ERR_NOSUCHNICK, nickname + " :No such nick/channel")); }
	const Numeric nosuchserver(const str &servername)								{ return (Numeric(ERR_NOSUCHSERVER, servername + " :No such servr"));}
	const Numeric nosuchchannel(const str &channelname)								{ return (Numeric(ERR_NOSUCHCHANNEL, channelname + " :No such channel"));}
	const Numeric cannotsendtochan(const str &channelname)							{ return (Numeric(ERR_CANNOTSENDTOCHAN, channelname + " :Cannot send to channel"));}
	const Numeric toomanychannels(const str &channelname)							{ return (Numeric(ERR_TOOMANYCHANNELS, channelname + " :You have joined too many channels"));}
	const Numeric wasnosuchnick(const str &nickname)								{ return (Numeric(ERR_WASNOSUCHNICK, nickname + " :There was no such nickname"));}
	const Numeric toomanytargets(const str &target)									{ return (Numeric(ERR_TOOMANYTARGETS, target + " :Duplicate recipients. No message delivered"));}
	// const Numeric nosuchservice(const str &servicename)								{ return (Numeric(ERR_NOSUCHSERVICE, servicename + " :No such service"));}
	const Numeric noorigin()														{ return (Numeric(ERR_NOORIGIN, ":No origin specified"));}
	const Numeric norecipient(const str &command)									{ return (Numeric(ERR_NORECIPIENT, ":No recipient given " + command));}
	const Numeric notexttosend()													{ return (Numeric(ERR_NOTEXTTOSEND, ":No text to send"));}
	const Numeric notoplevel(const str &mask)										{ return (Numeric(ERR_NOTOPLEVEL, mask + " :No top level domain specified"));}
	const Numeric wildtoplevel(const str &mask)										{ return (Numeric(ERR_WILDTOPLEVEL, mask + " :Wildcard in top level domain"));}
	const Numeric badmask(const str &mask)											{ return (Numeric(ERR_BADMASK, mask + " :Bad Server/host mask"));}
	const Numeric unknowncommand(const str &command)								{ return (Numeric(ERR_UNKNOWNCOMMAND, command + " :Unknown command"));}
	const Numeric nomotd()															{ return (Numeric(ERR_NOMOTD, ":MOTD file is missing"));}
	const Numeric noadmininfo()														{ return (Numeric(ERR_NOADMINFO, ":No administrative info available"));}
	const Numeric fillerror(const str &file_op, const str &file)					{ return (Numeric(ERR_FILERROR, ":File error doing " + file_op + " : on " + file));}
	const Numeric nonicknamegiven()													{ return (Numeric(ERR_NONICKNAMEGIVEN, ":No nickame given"));}
	const Numeric erroneusnickname(const str &nickname)								{ return (Numeric(ERR_ERRONEUSNICKNAME, nickname + " :Erroneus nickname"));}
	const Numeric nicknameinuse(const str &nickname)								{ return (Numeric(ERR_NICKNAMEINUSE, nickname + " :Nickname is already in use"));}
	const Numeric nickcollision(const str &nickname)								{ return (Numeric(ERR_NICKCOLLISION, nickname + " :Nickname collision KILL"));}
	const Numeric usernotinchannel(const str &nickname, const str &channel)			{ return (Numeric(ERR_USERNOTINCHANNEL, nickname + ' ' + channel + " :They aren't on that channel"));}
	const Numeric notonchannel(const str &channel)									{ return (Numeric(ERR_NOTONCHANNEL, channel + " :You're not on that channel"));}
	const Numeric useronchannel(const str &nickname, const str &channel)			{ return (Numeric(ERR_USERONCHANNEL, nickname + ' ' + channel + " :is already on channel"));}
	const Numeric nologin(const str &user)											{ return (Numeric(ERR_NOLOGIN, user + " :User not logged in"));}
	const Numeric summondisabled()													{ return (Numeric(ERR_SUMMONDISABLED, ":Summon has been disabled"));}
	const Numeric usersdisabled() 													{ return (Numeric(ERR_USERDISABLED, ":USERS has been disabled"));}
	const Numeric notregistered() 													{ return (Numeric(ERR_NOTREGISTERED, ":You have not registered"));}
	const Numeric needmoreparams(const str &command)								{ return (Numeric(ERR_NEEDMOREPARAMS, command + " :Not enough parameters"));}
	const Numeric alreadyregistred()												{ return (Numeric(ERR_ALREADYREGISTRED, ":Unauthorized command (already registered)"));}
	const Numeric nopermforhost()													{ return (Numeric(ERR_NOPERMFORHOST, ":Your host is not among the privileged"));}
	const Numeric passwdmissmatch() 												{ return (Numeric(ERR_PASSWDMISSMATCH, ":Password incorrect"));}
	const Numeric yourebannedcreep()												{ return (Numeric(ERR_YOUREBANNEDCREEP, ":You are banned from this server"));}
	const Numeric keyset(const str &channel)										{ return (Numeric(ERR_KEYSET, channel + " :Channel key already set"));}
	const Numeric channelisfull(const str &channel)									{ return (Numeric(ERR_CHANNELISFULL, channel + " :Channel is full"));}
	const Numeric unknownmode(const str &c)											{ return (Numeric(ERR_UNKNOWNMODE, c + " :is unknown mode char to me"));}
	const Numeric inviteonlychan(const str &channel)								{ return (Numeric(ERR_INVITEONLYCHAN, channel + " :Cannot join channel (+i)"));}
	const Numeric bannedfromchan(const str &channel)								{ return (Numeric(ERR_BANNEDFROMCHAN, channel + " :Cannot join channel (+b)"));}
	const Numeric badchannelkey(const str &channel)									{ return (Numeric(ERR_BADCHANNELKEY, channel + " :Cannot join channel (+k)"));}
	const Numeric nochanmodes(const str &channel)									{ return (Numeric(ERR_NOCHANMODES, channel + " :Channel doesn't support modes"));}
	const Numeric noprivileges()													{ return (Numeric(ERR_NOPRIVILEGES, ":Permission Denied- You're not an IRC operator"));}
	const Numeric chanoprisneeded(const str &channel)								{ return (Numeric(ERR_CHANOPRIVISNEED, channel + " :You're not channel operator"));}
	const Numeric cantkillserver() 													{ return (Numeric(ERR_CANTKILLSERVER, ":You can't kill a server"));}
	const Numeric restricted()														{ return (Numeric(ERR_RESTRICTED, ":Your connection is restricted!"));}
	const Numeric nooperhost()														{ return (Numeric(ERR_NOOPERHOST, ":No O-lines for your host"));}
	const Numeric umodeunknownflag()												{ return (Numeric(ERR_UMODEUNKNOWNFLAG, ":Unknown MODE flag"));}
	const Numeric usersdontmatch()													{ return (Numeric(ERR_USERSDONTMATCH, ":Can't change mode for other users"));}
} /* end of namespace Error */

namespace Reply
{
	const Numeric welcome(const str &userPrefix)									{ return (Numeric(RPL_WELCOME, ":Welcome to the Internet Relay Network " + userPrefix));}
	const Numeric yourhost(const str &servername, const str &version)				{ return (Numeric(RPL_YOURHOST, ":Your host is " + servername + ", running version " + version));}
	const Numeric created(const str &date)											{ return (Numeric(RPL_CREATED, ":This server was created " + date));}
	const Numeric myinfo(const str &servername, const str &version, const str &availableUserModes, const str &availableChannelModes) 
																					{ return (Numeric(RPL_MYINFO, ':' + servername + ' ' + version + ' ' + availableUserModes + ' ' + availableChannelModes));}
	const Numeric bounce(const str &servername, const str &port)					{ return (Numeric(RPL_BOUNCE, ":Try server " + servername + ", port " + port));}
	const Numeric statslinkinfo(const str &linkname, size_t sendq, size_t sentMessages, size_t sentKbytes, size_t recvMessages, size_t recvKbytes, time_t timeOpen){
		strstream ss;
		ss << linkname << ' ' << sendq << ' ' << sentMessages << ' ' << sentKbytes
		<< ' ' << recvMessages << ' ' << recvKbytes << ' ' << timeOpen;
		return (Numeric(RPL_STATSLINKINFO, ss.str()));
}
	const Numeric statscommands(const str &command, size_t count, size_t byteCount, size_t remoteCount){
		strstream ss;
		ss << command << ' ' << count << ' ' << byteCount << ' ' << remoteCount;
		return (Numeric(RPL_STATSCOMMANDS, ss.str()));
}
	const Numeric endofstats(const str &letter)										{ return (Numeric(RPL_ENDOFSTATS, letter + " :End of STATS report"));}
	const Numeric umodeis(const str &modes)											{ return (Numeric(RPL_UMODEIS, '+' + modes));}
	const Numeric servlist(const str &name, const str &server, const str &mask, const str &type, size_t hopcount, const str &info)
																					{ return (Numeric(RPL_SERVLIST, name + ' ' + server + ' ' + mask + ' ' + type + ' ' + ft::toString(hopcount) + " :" + info));}
	const Numeric servlistend(const str &mask, const str &type)						{ return (Numeric(RPL_SERVLISTEND, mask + ' ' + type + " :End of service listing"));}
	const Numeric statuptime(time_t uptime){
		strstream ss;
		time_t m = 60, h = 60 * m, d = 24 * h;
		ss << ":Server Up " << (uptime / d) << " days ";
		uptime %= d;
		ss << (uptime / h);
		uptime %= h;
		ss << ':' << std::setfill('0') << std::setw(2) << (uptime / m)
		<< ':' << std::setfill('0') << std::setw(2) << (uptime % m);
		return (Numeric(RPL_STATSUPTIME, ss.str()));
	}
	const Numeric statoline(const str &hostmask, const str &name)					{ return (Numeric(RPL_AWAY, "O " + hostmask + " * " + name));}
	const Numeric away(const str &nickname, const str &reason)						{ return (Numeric(RPL_AWAY, nickname + " :" + reason));}
	const Numeric unaway()															{ return (Numeric(RPL_UNAWAY, ":You are no longer marked as being away"));}
	const Numeric nowaway()															{ return (Numeric(RPL_AWAY, ":You have been marked as being away"));}
	const Numeric list(const str &channel, size_t visible, const str &topic)		{ return (Numeric(RPL_LIST, channel + ' ' + ft::toString(visible) + " :" + topic));}
	const Numeric listend()															{ return (Numeric(RPL_LISTEND, ":End of LIST"));}
	const Numeric channelmodeis(const str &channel, const str &modes)				{ return (Numeric(RPL_CHANNELMODEIS, channel + " +" + modes));}
	const Numeric notopic(const str &channel)										{ return (Numeric(RPL_NOTOPIC, channel + " :No topic is set"));}
	const Numeric topic(const str &channel, const str &topic)						{ return (Numeric(RPL_TOPIC, channel + " :" + topic));}
	const Numeric inviting(const str &channel, const str &nickname)					{ return (Numeric(RPL_INVITING, channel + ' ' + nickname));}
	const Numeric invitelist(const str &channel, const str &invitemask)				{ return (Numeric(RPL_INVITELIST, channel + ' ' + invitemask));}
	const Numeric endofinvitelist(const str &channel)								{ return (Numeric(RPL_ENDOFINVITELIST, channel + " :End of channel invite list"));}
	const Numeric exceptlist(const str &channel, const str &exceptionmask)			{ return (Numeric(RPL_EXCEPTLIST, channel + ' ' + exceptionmask));}
	const Numeric endofexceptlist(const str &channel)								{ return (Numeric(RPL_ENDOFEXCEPTLIST, channel + " :End of channel exception list"));}
	const Numeric version(const str &version, const str debuglevel, const str &server, const str &comments)	
																					{ return (Numeric(RPL_VERSION, version + '.' + debuglevel + ' ' + server + " :" + comments));}
	const Numeric namreply(const str &names)										{ return (Numeric(RPL_NAMREPLY, names));}
	const Numeric endofnames(const str &name)										{ return (Numeric(RPL_ENDOFNAMES, name + " :End of NAMES list"));}
	const Numeric banlist(const str &channel, const str &banmask)					{ return (Numeric(RPL_BANLIST, channel + ' ' + banmask));}
	const Numeric endofbanlist(const str &channel)									{ return (Numeric(RPL_ENDOFBANLIST, channel + " :End of channel ban list"));}
	const Numeric motd(const str &text)												{ return (Numeric(RPL_MOTD, ":- " + text));}
	const Numeric motdstart(const str &servername)									{ return (Numeric(RPL_MOTDSTART, ":- " + servername + " Message of the day - "));}
	const Numeric endofmotd()														{ return (Numeric(RPL_ENDOFMOTD, ":End of MOTD command"));}
	const Numeric info(const str &info)												{ return (Numeric(RPL_INFO, ':' + info));}
	const Numeric endofinfo()														{ return (Numeric(RPL_ENDOFINFO, ":End of INFO list"));}
	const Numeric youreoper()														{ return (Numeric(RPL_YOUREOPER, ":You are now an IRC operator"));}
	const Numeric youreservice(const str &servicename)								{ return (Numeric(RPL_YOURESERVICE, ":You are service " + servicename));}
	const Numeric time(const str &servername)										{ return (Numeric(RPL_TIME, servername + ft::toDate(::time(NULL), " :%x - %I:%M:%S %z")));}
	const Numeric lusersclient(size_t users, size_t services, size_t servers)		{ return (Numeric(RPL_LUSERCLIENT, ":There are " + ft::toString(users) + " users and " + ft::toString(services) + " services on " + ft::toString(servers) + " server"));	}
	const Numeric lusersop(size_t nb)												{ return (Numeric(RPL_LUSEROP, ft::toString(nb) + " :operator(s) online"));}
	const Numeric lusersunknown(size_t nb)											{ return (Numeric(RPL_LUSERUNKNOWN, ft::toString(nb) + " :unknown connection(s)"));}
	const Numeric luserschannels(size_t nb)											{ return (Numeric(RPL_LUSERCHANNELS, ft::toString(nb) + " :channels formed"));}
	const Numeric lusersme(size_t nb)												{ return (Numeric(RPL_LUSERME, ":I have " + ft::toString(nb) + " clients and 1 server"));}
	const Numeric whoisuser(const str &nick, const str &user, const str &host, const str &realname)	
																					{ return (Numeric(RPL_WHOISUSER, nick + " " + user + " " + host + " * :" + realname));}
	const Numeric whoisserver(const str &nick, const str &servername, const str shortinfo)
																					{ return (Numeric(RPL_WHOISSERVER, nick + " " + servername + " :" + shortinfo));}
	const Numeric whoisoperator(const str &nick)									{ return (Numeric(RPL_WHOISOPERATOR, nick + " :is an IRC operator"));}
	const Numeric whoisidle(const str &nick, size_t idle)							{ return (Numeric(RPL_WHOISIDLE, nick + " " + ft::toString(idle) + " :seconds idle"));}
	const Numeric whoischannels(const str &nick, const str &status, const str &channel)	
																					{ return (Numeric(RPL_WHOISCHANNELS, nick + " :" + status + channel));}
	const Numeric endofwhois(const str &nick)										{ return (Numeric(RPL_ENDOFWHOIS, nick + " :End of WHOIS list"));}
	const Numeric whoreply(const str &msg)											{ return (Numeric(RPL_WHOREPLY, msg));}
	const Numeric endofwho(const str &target)										{ return (Numeric(RPL_ENDOFWHO, target + " :End of WHO list"));}
	const Numeric whowasuser(const str &nick, const str &user, const str &host, const str &realname)	
																					{ return (Numeric(RPL_WHOWASUSER, nick + " " + user + " " + host + " * :" + realname));}
	const Numeric endofwhowas(const str &nick)										{ return (Numeric(RPL_ENDOFWHOWAS, nick + " :End of WHOWAS"));}
	const Numeric rehashing(const str &filename)									{ return (Numeric(RPL_REHASHING, filename + " :Rehashing"));}
	const Numeric userhostreply(const str &msg)										{ return (Numeric(RPL_USERHOST, ":" + msg));}
} /* end of namespace Reply */

} /* end of namespace IRC */
